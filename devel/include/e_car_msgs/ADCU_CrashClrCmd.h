// Generated by gencpp from file e_car_msgs/ADCU_CrashClrCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_CRASHCLRCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_CRASHCLRCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_CrashClrCmd_
{
  typedef ADCU_CrashClrCmd_<ContainerAllocator> Type;

  ADCU_CrashClrCmd_()
    : header()
    , CrashClearCmd_Valid(0)
    , CrashClear_Cmd(0)
    , EmgcSwhClearCmd_Valid(0)
    , EmgcSwhClear_Cmd(0)
    , CrashClr_RollCnt(0)
    , CrashClr_Checksum(0)  {
    }
  ADCU_CrashClrCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CrashClearCmd_Valid(0)
    , CrashClear_Cmd(0)
    , EmgcSwhClearCmd_Valid(0)
    , EmgcSwhClear_Cmd(0)
    , CrashClr_RollCnt(0)
    , CrashClr_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _CrashClearCmd_Valid_type;
  _CrashClearCmd_Valid_type CrashClearCmd_Valid;

   typedef int8_t _CrashClear_Cmd_type;
  _CrashClear_Cmd_type CrashClear_Cmd;

   typedef int8_t _EmgcSwhClearCmd_Valid_type;
  _EmgcSwhClearCmd_Valid_type EmgcSwhClearCmd_Valid;

   typedef int8_t _EmgcSwhClear_Cmd_type;
  _EmgcSwhClear_Cmd_type EmgcSwhClear_Cmd;

   typedef int32_t _CrashClr_RollCnt_type;
  _CrashClr_RollCnt_type CrashClr_RollCnt;

   typedef int32_t _CrashClr_Checksum_type;
  _CrashClr_Checksum_type CrashClr_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_CrashClrCmd_

typedef ::e_car_msgs::ADCU_CrashClrCmd_<std::allocator<void> > ADCU_CrashClrCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_CrashClrCmd > ADCU_CrashClrCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_CrashClrCmd const> ADCU_CrashClrCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.CrashClearCmd_Valid == rhs.CrashClearCmd_Valid &&
    lhs.CrashClear_Cmd == rhs.CrashClear_Cmd &&
    lhs.EmgcSwhClearCmd_Valid == rhs.EmgcSwhClearCmd_Valid &&
    lhs.EmgcSwhClear_Cmd == rhs.EmgcSwhClear_Cmd &&
    lhs.CrashClr_RollCnt == rhs.CrashClr_RollCnt &&
    lhs.CrashClr_Checksum == rhs.CrashClr_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a6390ae19310931cf5022dca0df4235";
  }

  static const char* value(const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a6390ae19310931ULL;
  static const uint64_t static_value2 = 0xcf5022dca0df4235ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_CrashClrCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 CrashClearCmd_Valid\n"
"\n"
"int8 CrashClear_Cmd\n"
"\n"
"int8 EmgcSwhClearCmd_Valid\n"
"\n"
"int8 EmgcSwhClear_Cmd\n"
"\n"
"int32 CrashClr_RollCnt\n"
"\n"
"int32 CrashClr_Checksum\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CrashClearCmd_Valid);
      stream.next(m.CrashClear_Cmd);
      stream.next(m.EmgcSwhClearCmd_Valid);
      stream.next(m.EmgcSwhClear_Cmd);
      stream.next(m.CrashClr_RollCnt);
      stream.next(m.CrashClr_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_CrashClrCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_CrashClrCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CrashClearCmd_Valid: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CrashClearCmd_Valid);
    s << indent << "CrashClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CrashClear_Cmd);
    s << indent << "EmgcSwhClearCmd_Valid: ";
    Printer<int8_t>::stream(s, indent + "  ", v.EmgcSwhClearCmd_Valid);
    s << indent << "EmgcSwhClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.EmgcSwhClear_Cmd);
    s << indent << "CrashClr_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CrashClr_RollCnt);
    s << indent << "CrashClr_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CrashClr_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_CRASHCLRCMD_H
