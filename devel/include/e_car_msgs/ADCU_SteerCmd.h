// Generated by gencpp from file e_car_msgs/ADCU_SteerCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_STEERCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_STEERCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_SteerCmd_
{
  typedef ADCU_SteerCmd_<ContainerAllocator> Type;

  ADCU_SteerCmd_()
    : header()
    , Str_Active(0)
    , Str_CtrlMode(0)
    , Str_TgtAngle(0.0)
    , Str_TgtAngleSpd(0.0)
    , StrCmd_RollCnt(0)
    , StrCmd_Checksum(0)  {
    }
  ADCU_SteerCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Str_Active(0)
    , Str_CtrlMode(0)
    , Str_TgtAngle(0.0)
    , Str_TgtAngleSpd(0.0)
    , StrCmd_RollCnt(0)
    , StrCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _Str_Active_type;
  _Str_Active_type Str_Active;

   typedef int8_t _Str_CtrlMode_type;
  _Str_CtrlMode_type Str_CtrlMode;

   typedef float _Str_TgtAngle_type;
  _Str_TgtAngle_type Str_TgtAngle;

   typedef float _Str_TgtAngleSpd_type;
  _Str_TgtAngleSpd_type Str_TgtAngleSpd;

   typedef int32_t _StrCmd_RollCnt_type;
  _StrCmd_RollCnt_type StrCmd_RollCnt;

   typedef int32_t _StrCmd_Checksum_type;
  _StrCmd_Checksum_type StrCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_SteerCmd_

typedef ::e_car_msgs::ADCU_SteerCmd_<std::allocator<void> > ADCU_SteerCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_SteerCmd > ADCU_SteerCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_SteerCmd const> ADCU_SteerCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Str_Active == rhs.Str_Active &&
    lhs.Str_CtrlMode == rhs.Str_CtrlMode &&
    lhs.Str_TgtAngle == rhs.Str_TgtAngle &&
    lhs.Str_TgtAngleSpd == rhs.Str_TgtAngleSpd &&
    lhs.StrCmd_RollCnt == rhs.StrCmd_RollCnt &&
    lhs.StrCmd_Checksum == rhs.StrCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c28ae07fba8b70da0e80a1960035feb5";
  }

  static const char* value(const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc28ae07fba8b70daULL;
  static const uint64_t static_value2 = 0x0e80a1960035feb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_SteerCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 Str_Active\n"
"\n"
"int8 Str_CtrlMode\n"
"\n"
"float32 Str_TgtAngle\n"
"\n"
"float32 Str_TgtAngleSpd\n"
"\n"
"int32 StrCmd_RollCnt\n"
"\n"
"int32 StrCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Str_Active);
      stream.next(m.Str_CtrlMode);
      stream.next(m.Str_TgtAngle);
      stream.next(m.Str_TgtAngleSpd);
      stream.next(m.StrCmd_RollCnt);
      stream.next(m.StrCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_SteerCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_SteerCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Str_Active: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Str_Active);
    s << indent << "Str_CtrlMode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Str_CtrlMode);
    s << indent << "Str_TgtAngle: ";
    Printer<float>::stream(s, indent + "  ", v.Str_TgtAngle);
    s << indent << "Str_TgtAngleSpd: ";
    Printer<float>::stream(s, indent + "  ", v.Str_TgtAngleSpd);
    s << indent << "StrCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.StrCmd_RollCnt);
    s << indent << "StrCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.StrCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_STEERCMD_H
