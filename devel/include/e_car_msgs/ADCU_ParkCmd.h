// Generated by gencpp from file e_car_msgs/ADCU_ParkCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_PARKCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_PARKCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_ParkCmd_
{
  typedef ADCU_ParkCmd_<ContainerAllocator> Type;

  ADCU_ParkCmd_()
    : header()
    , Prk_Active(0)
    , Prk_Enable(0)
    , PrkCmd_RollCnt(0)
    , PrkCmd_Checksum(0)  {
    }
  ADCU_ParkCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Prk_Active(0)
    , Prk_Enable(0)
    , PrkCmd_RollCnt(0)
    , PrkCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _Prk_Active_type;
  _Prk_Active_type Prk_Active;

   typedef int8_t _Prk_Enable_type;
  _Prk_Enable_type Prk_Enable;

   typedef int32_t _PrkCmd_RollCnt_type;
  _PrkCmd_RollCnt_type PrkCmd_RollCnt;

   typedef int32_t _PrkCmd_Checksum_type;
  _PrkCmd_Checksum_type PrkCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_ParkCmd_

typedef ::e_car_msgs::ADCU_ParkCmd_<std::allocator<void> > ADCU_ParkCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_ParkCmd > ADCU_ParkCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_ParkCmd const> ADCU_ParkCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Prk_Active == rhs.Prk_Active &&
    lhs.Prk_Enable == rhs.Prk_Enable &&
    lhs.PrkCmd_RollCnt == rhs.PrkCmd_RollCnt &&
    lhs.PrkCmd_Checksum == rhs.PrkCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd00658d46e5ca4d0dd437a5ea884545";
  }

  static const char* value(const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd00658d46e5ca4dULL;
  static const uint64_t static_value2 = 0x0dd437a5ea884545ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_ParkCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 Prk_Active\n"
"\n"
"int8 Prk_Enable\n"
"\n"
"int32 PrkCmd_RollCnt\n"
"\n"
"int32 PrkCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Prk_Active);
      stream.next(m.Prk_Enable);
      stream.next(m.PrkCmd_RollCnt);
      stream.next(m.PrkCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_ParkCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_ParkCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Prk_Active: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Prk_Active);
    s << indent << "Prk_Enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Prk_Enable);
    s << indent << "PrkCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PrkCmd_RollCnt);
    s << indent << "PrkCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PrkCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_PARKCMD_H
