// Generated by gencpp from file e_car_msgs/ADCU_TripClear.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_TRIPCLEAR_H
#define E_CAR_MSGS_MESSAGE_ADCU_TRIPCLEAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_TripClear_
{
  typedef ADCU_TripClear_<ContainerAllocator> Type;

  ADCU_TripClear_()
    : header()
    , TotalTripClear_Cmd(0)
    , RmtDrvTripClear_Cmd(0)
    , AutoDrvTripClear_Cmd(0)
    , CldDrvTripClear_Cmd(0)
    , TripClear_RollCnt(0)
    , TripClear_Checksum(0)  {
    }
  ADCU_TripClear_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , TotalTripClear_Cmd(0)
    , RmtDrvTripClear_Cmd(0)
    , AutoDrvTripClear_Cmd(0)
    , CldDrvTripClear_Cmd(0)
    , TripClear_RollCnt(0)
    , TripClear_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _TotalTripClear_Cmd_type;
  _TotalTripClear_Cmd_type TotalTripClear_Cmd;

   typedef int8_t _RmtDrvTripClear_Cmd_type;
  _RmtDrvTripClear_Cmd_type RmtDrvTripClear_Cmd;

   typedef int8_t _AutoDrvTripClear_Cmd_type;
  _AutoDrvTripClear_Cmd_type AutoDrvTripClear_Cmd;

   typedef int8_t _CldDrvTripClear_Cmd_type;
  _CldDrvTripClear_Cmd_type CldDrvTripClear_Cmd;

   typedef int32_t _TripClear_RollCnt_type;
  _TripClear_RollCnt_type TripClear_RollCnt;

   typedef int32_t _TripClear_Checksum_type;
  _TripClear_Checksum_type TripClear_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_TripClear_

typedef ::e_car_msgs::ADCU_TripClear_<std::allocator<void> > ADCU_TripClear;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_TripClear > ADCU_TripClearPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_TripClear const> ADCU_TripClearConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.TotalTripClear_Cmd == rhs.TotalTripClear_Cmd &&
    lhs.RmtDrvTripClear_Cmd == rhs.RmtDrvTripClear_Cmd &&
    lhs.AutoDrvTripClear_Cmd == rhs.AutoDrvTripClear_Cmd &&
    lhs.CldDrvTripClear_Cmd == rhs.CldDrvTripClear_Cmd &&
    lhs.TripClear_RollCnt == rhs.TripClear_RollCnt &&
    lhs.TripClear_Checksum == rhs.TripClear_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a36ba245d873b5273a133be9bf8ae01";
  }

  static const char* value(const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a36ba245d873b52ULL;
  static const uint64_t static_value2 = 0x73a133be9bf8ae01ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_TripClear";
  }

  static const char* value(const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 TotalTripClear_Cmd\n"
"\n"
"int8 RmtDrvTripClear_Cmd\n"
"\n"
"int8 AutoDrvTripClear_Cmd\n"
"\n"
"int8 CldDrvTripClear_Cmd\n"
"\n"
"int32 TripClear_RollCnt\n"
"\n"
"int32 TripClear_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.TotalTripClear_Cmd);
      stream.next(m.RmtDrvTripClear_Cmd);
      stream.next(m.AutoDrvTripClear_Cmd);
      stream.next(m.CldDrvTripClear_Cmd);
      stream.next(m.TripClear_RollCnt);
      stream.next(m.TripClear_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_TripClear_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_TripClear_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_TripClear_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "TotalTripClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.TotalTripClear_Cmd);
    s << indent << "RmtDrvTripClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RmtDrvTripClear_Cmd);
    s << indent << "AutoDrvTripClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AutoDrvTripClear_Cmd);
    s << indent << "CldDrvTripClear_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldDrvTripClear_Cmd);
    s << indent << "TripClear_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TripClear_RollCnt);
    s << indent << "TripClear_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TripClear_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_TRIPCLEAR_H
