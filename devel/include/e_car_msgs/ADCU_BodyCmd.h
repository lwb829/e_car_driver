// Generated by gencpp from file e_car_msgs/ADCU_BodyCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_BODYCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_BODYCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_BodyCmd_
{
  typedef ADCU_BodyCmd_<ContainerAllocator> Type;

  ADCU_BodyCmd_()
    : header()
    , LampCmd_Active(0)
    , HeadLamp_Cmd(0)
    , DblFlashLamp_Cmd(0)
    , TurnLLamp_Cmd(0)
    , TurnRLamp_Cmd(0)
    , BackLamp_Cmd(0)
    , Buzzer_Cmd(0)
    , Horn_Cmd(0)
    , RunLamp_Cmd(0)
    , BrkLamp_Cmd(0)
    , FogLamp_Cmd(0)
    , WidthLamp_Cmd(0)
    , LampCmd_RollCnt(0)
    , LampCmd_Checksum(0)  {
    }
  ADCU_BodyCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LampCmd_Active(0)
    , HeadLamp_Cmd(0)
    , DblFlashLamp_Cmd(0)
    , TurnLLamp_Cmd(0)
    , TurnRLamp_Cmd(0)
    , BackLamp_Cmd(0)
    , Buzzer_Cmd(0)
    , Horn_Cmd(0)
    , RunLamp_Cmd(0)
    , BrkLamp_Cmd(0)
    , FogLamp_Cmd(0)
    , WidthLamp_Cmd(0)
    , LampCmd_RollCnt(0)
    , LampCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _LampCmd_Active_type;
  _LampCmd_Active_type LampCmd_Active;

   typedef int8_t _HeadLamp_Cmd_type;
  _HeadLamp_Cmd_type HeadLamp_Cmd;

   typedef int8_t _DblFlashLamp_Cmd_type;
  _DblFlashLamp_Cmd_type DblFlashLamp_Cmd;

   typedef int8_t _TurnLLamp_Cmd_type;
  _TurnLLamp_Cmd_type TurnLLamp_Cmd;

   typedef int8_t _TurnRLamp_Cmd_type;
  _TurnRLamp_Cmd_type TurnRLamp_Cmd;

   typedef int8_t _BackLamp_Cmd_type;
  _BackLamp_Cmd_type BackLamp_Cmd;

   typedef int8_t _Buzzer_Cmd_type;
  _Buzzer_Cmd_type Buzzer_Cmd;

   typedef int8_t _Horn_Cmd_type;
  _Horn_Cmd_type Horn_Cmd;

   typedef int8_t _RunLamp_Cmd_type;
  _RunLamp_Cmd_type RunLamp_Cmd;

   typedef int8_t _BrkLamp_Cmd_type;
  _BrkLamp_Cmd_type BrkLamp_Cmd;

   typedef int8_t _FogLamp_Cmd_type;
  _FogLamp_Cmd_type FogLamp_Cmd;

   typedef int8_t _WidthLamp_Cmd_type;
  _WidthLamp_Cmd_type WidthLamp_Cmd;

   typedef int32_t _LampCmd_RollCnt_type;
  _LampCmd_RollCnt_type LampCmd_RollCnt;

   typedef int32_t _LampCmd_Checksum_type;
  _LampCmd_Checksum_type LampCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_BodyCmd_

typedef ::e_car_msgs::ADCU_BodyCmd_<std::allocator<void> > ADCU_BodyCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_BodyCmd > ADCU_BodyCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_BodyCmd const> ADCU_BodyCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.LampCmd_Active == rhs.LampCmd_Active &&
    lhs.HeadLamp_Cmd == rhs.HeadLamp_Cmd &&
    lhs.DblFlashLamp_Cmd == rhs.DblFlashLamp_Cmd &&
    lhs.TurnLLamp_Cmd == rhs.TurnLLamp_Cmd &&
    lhs.TurnRLamp_Cmd == rhs.TurnRLamp_Cmd &&
    lhs.BackLamp_Cmd == rhs.BackLamp_Cmd &&
    lhs.Buzzer_Cmd == rhs.Buzzer_Cmd &&
    lhs.Horn_Cmd == rhs.Horn_Cmd &&
    lhs.RunLamp_Cmd == rhs.RunLamp_Cmd &&
    lhs.BrkLamp_Cmd == rhs.BrkLamp_Cmd &&
    lhs.FogLamp_Cmd == rhs.FogLamp_Cmd &&
    lhs.WidthLamp_Cmd == rhs.WidthLamp_Cmd &&
    lhs.LampCmd_RollCnt == rhs.LampCmd_RollCnt &&
    lhs.LampCmd_Checksum == rhs.LampCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d293b40475c67e82549c2ea01e9369b9";
  }

  static const char* value(const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd293b40475c67e82ULL;
  static const uint64_t static_value2 = 0x549c2ea01e9369b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_BodyCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 LampCmd_Active\n"
"\n"
"int8 HeadLamp_Cmd\n"
"\n"
"int8 DblFlashLamp_Cmd\n"
"\n"
"int8 TurnLLamp_Cmd\n"
"\n"
"int8 TurnRLamp_Cmd\n"
"\n"
"int8 BackLamp_Cmd\n"
"\n"
"int8 Buzzer_Cmd\n"
"\n"
"int8 Horn_Cmd\n"
"\n"
"int8 RunLamp_Cmd\n"
"\n"
"int8 BrkLamp_Cmd\n"
"\n"
"int8 FogLamp_Cmd\n"
"\n"
"int8 WidthLamp_Cmd\n"
"\n"
"int32 LampCmd_RollCnt\n"
"\n"
"int32 LampCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LampCmd_Active);
      stream.next(m.HeadLamp_Cmd);
      stream.next(m.DblFlashLamp_Cmd);
      stream.next(m.TurnLLamp_Cmd);
      stream.next(m.TurnRLamp_Cmd);
      stream.next(m.BackLamp_Cmd);
      stream.next(m.Buzzer_Cmd);
      stream.next(m.Horn_Cmd);
      stream.next(m.RunLamp_Cmd);
      stream.next(m.BrkLamp_Cmd);
      stream.next(m.FogLamp_Cmd);
      stream.next(m.WidthLamp_Cmd);
      stream.next(m.LampCmd_RollCnt);
      stream.next(m.LampCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_BodyCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_BodyCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LampCmd_Active: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LampCmd_Active);
    s << indent << "HeadLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.HeadLamp_Cmd);
    s << indent << "DblFlashLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.DblFlashLamp_Cmd);
    s << indent << "TurnLLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.TurnLLamp_Cmd);
    s << indent << "TurnRLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.TurnRLamp_Cmd);
    s << indent << "BackLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.BackLamp_Cmd);
    s << indent << "Buzzer_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Buzzer_Cmd);
    s << indent << "Horn_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Horn_Cmd);
    s << indent << "RunLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RunLamp_Cmd);
    s << indent << "BrkLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.BrkLamp_Cmd);
    s << indent << "FogLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.FogLamp_Cmd);
    s << indent << "WidthLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.WidthLamp_Cmd);
    s << indent << "LampCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LampCmd_RollCnt);
    s << indent << "LampCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LampCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_BODYCMD_H
