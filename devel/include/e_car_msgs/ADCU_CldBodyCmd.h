// Generated by gencpp from file e_car_msgs/ADCU_CldBodyCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_CLDBODYCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_CLDBODYCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_CldBodyCmd_
{
  typedef ADCU_CldBodyCmd_<ContainerAllocator> Type;

  ADCU_CldBodyCmd_()
    : header()
    , Cld_WidthLamp_Cmd(0)
    , Cld_BrkLamp_Cmd(0)
    , Cld_FogLamp_Cmd(0)
    , Cld_HeadLamp_Cmd(0)
    , Cld_DblFlashLamp_Cmd(0)
    , Cld_TurnLLamp_Cmd(0)
    , Cld_TurnRLamp_Cmd(0)
    , Cld_BackLamp_Cmd(0)
    , Cld_Buzzer_Cmd(0)
    , Cld_Horn_Cmd(0)
    , Cld_RunLamp_Cmd(0)
    , CldBodyCmd_RollCnt(0)
    , CldBodyCmd_Checksum(0)  {
    }
  ADCU_CldBodyCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Cld_WidthLamp_Cmd(0)
    , Cld_BrkLamp_Cmd(0)
    , Cld_FogLamp_Cmd(0)
    , Cld_HeadLamp_Cmd(0)
    , Cld_DblFlashLamp_Cmd(0)
    , Cld_TurnLLamp_Cmd(0)
    , Cld_TurnRLamp_Cmd(0)
    , Cld_BackLamp_Cmd(0)
    , Cld_Buzzer_Cmd(0)
    , Cld_Horn_Cmd(0)
    , Cld_RunLamp_Cmd(0)
    , CldBodyCmd_RollCnt(0)
    , CldBodyCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _Cld_WidthLamp_Cmd_type;
  _Cld_WidthLamp_Cmd_type Cld_WidthLamp_Cmd;

   typedef int8_t _Cld_BrkLamp_Cmd_type;
  _Cld_BrkLamp_Cmd_type Cld_BrkLamp_Cmd;

   typedef int8_t _Cld_FogLamp_Cmd_type;
  _Cld_FogLamp_Cmd_type Cld_FogLamp_Cmd;

   typedef int8_t _Cld_HeadLamp_Cmd_type;
  _Cld_HeadLamp_Cmd_type Cld_HeadLamp_Cmd;

   typedef int8_t _Cld_DblFlashLamp_Cmd_type;
  _Cld_DblFlashLamp_Cmd_type Cld_DblFlashLamp_Cmd;

   typedef int8_t _Cld_TurnLLamp_Cmd_type;
  _Cld_TurnLLamp_Cmd_type Cld_TurnLLamp_Cmd;

   typedef int8_t _Cld_TurnRLamp_Cmd_type;
  _Cld_TurnRLamp_Cmd_type Cld_TurnRLamp_Cmd;

   typedef int8_t _Cld_BackLamp_Cmd_type;
  _Cld_BackLamp_Cmd_type Cld_BackLamp_Cmd;

   typedef int8_t _Cld_Buzzer_Cmd_type;
  _Cld_Buzzer_Cmd_type Cld_Buzzer_Cmd;

   typedef int8_t _Cld_Horn_Cmd_type;
  _Cld_Horn_Cmd_type Cld_Horn_Cmd;

   typedef int8_t _Cld_RunLamp_Cmd_type;
  _Cld_RunLamp_Cmd_type Cld_RunLamp_Cmd;

   typedef int32_t _CldBodyCmd_RollCnt_type;
  _CldBodyCmd_RollCnt_type CldBodyCmd_RollCnt;

   typedef int32_t _CldBodyCmd_Checksum_type;
  _CldBodyCmd_Checksum_type CldBodyCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_CldBodyCmd_

typedef ::e_car_msgs::ADCU_CldBodyCmd_<std::allocator<void> > ADCU_CldBodyCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldBodyCmd > ADCU_CldBodyCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldBodyCmd const> ADCU_CldBodyCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Cld_WidthLamp_Cmd == rhs.Cld_WidthLamp_Cmd &&
    lhs.Cld_BrkLamp_Cmd == rhs.Cld_BrkLamp_Cmd &&
    lhs.Cld_FogLamp_Cmd == rhs.Cld_FogLamp_Cmd &&
    lhs.Cld_HeadLamp_Cmd == rhs.Cld_HeadLamp_Cmd &&
    lhs.Cld_DblFlashLamp_Cmd == rhs.Cld_DblFlashLamp_Cmd &&
    lhs.Cld_TurnLLamp_Cmd == rhs.Cld_TurnLLamp_Cmd &&
    lhs.Cld_TurnRLamp_Cmd == rhs.Cld_TurnRLamp_Cmd &&
    lhs.Cld_BackLamp_Cmd == rhs.Cld_BackLamp_Cmd &&
    lhs.Cld_Buzzer_Cmd == rhs.Cld_Buzzer_Cmd &&
    lhs.Cld_Horn_Cmd == rhs.Cld_Horn_Cmd &&
    lhs.Cld_RunLamp_Cmd == rhs.Cld_RunLamp_Cmd &&
    lhs.CldBodyCmd_RollCnt == rhs.CldBodyCmd_RollCnt &&
    lhs.CldBodyCmd_Checksum == rhs.CldBodyCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e996fa29fe9d34f1678bf393df7a1655";
  }

  static const char* value(const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe996fa29fe9d34f1ULL;
  static const uint64_t static_value2 = 0x678bf393df7a1655ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_CldBodyCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 Cld_WidthLamp_Cmd\n"
"\n"
"int8 Cld_BrkLamp_Cmd\n"
"\n"
"int8 Cld_FogLamp_Cmd\n"
"\n"
"int8 Cld_HeadLamp_Cmd\n"
"\n"
"int8 Cld_DblFlashLamp_Cmd\n"
"\n"
"int8 Cld_TurnLLamp_Cmd\n"
"\n"
"int8 Cld_TurnRLamp_Cmd\n"
"\n"
"int8 Cld_BackLamp_Cmd\n"
"\n"
"int8 Cld_Buzzer_Cmd\n"
"\n"
"int8 Cld_Horn_Cmd\n"
"\n"
"int8 Cld_RunLamp_Cmd\n"
"\n"
"int32 CldBodyCmd_RollCnt\n"
"\n"
"int32 CldBodyCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Cld_WidthLamp_Cmd);
      stream.next(m.Cld_BrkLamp_Cmd);
      stream.next(m.Cld_FogLamp_Cmd);
      stream.next(m.Cld_HeadLamp_Cmd);
      stream.next(m.Cld_DblFlashLamp_Cmd);
      stream.next(m.Cld_TurnLLamp_Cmd);
      stream.next(m.Cld_TurnRLamp_Cmd);
      stream.next(m.Cld_BackLamp_Cmd);
      stream.next(m.Cld_Buzzer_Cmd);
      stream.next(m.Cld_Horn_Cmd);
      stream.next(m.Cld_RunLamp_Cmd);
      stream.next(m.CldBodyCmd_RollCnt);
      stream.next(m.CldBodyCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_CldBodyCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_CldBodyCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Cld_WidthLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_WidthLamp_Cmd);
    s << indent << "Cld_BrkLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_BrkLamp_Cmd);
    s << indent << "Cld_FogLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_FogLamp_Cmd);
    s << indent << "Cld_HeadLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_HeadLamp_Cmd);
    s << indent << "Cld_DblFlashLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_DblFlashLamp_Cmd);
    s << indent << "Cld_TurnLLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_TurnLLamp_Cmd);
    s << indent << "Cld_TurnRLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_TurnRLamp_Cmd);
    s << indent << "Cld_BackLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_BackLamp_Cmd);
    s << indent << "Cld_Buzzer_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_Buzzer_Cmd);
    s << indent << "Cld_Horn_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_Horn_Cmd);
    s << indent << "Cld_RunLamp_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld_RunLamp_Cmd);
    s << indent << "CldBodyCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CldBodyCmd_RollCnt);
    s << indent << "CldBodyCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CldBodyCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_CLDBODYCMD_H
