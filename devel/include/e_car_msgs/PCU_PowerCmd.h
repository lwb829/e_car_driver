// Generated by gencpp from file e_car_msgs/PCU_PowerCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_PCU_POWERCMD_H
#define E_CAR_MSGS_MESSAGE_PCU_POWERCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct PCU_PowerCmd_
{
  typedef PCU_PowerCmd_<ContainerAllocator> Type;

  PCU_PowerCmd_()
    : header()
    , ADChasPwrup_Cmd(0)
    , AD12VMCPwrup_Cmd(0)
    , AD12VSC1Pwrup_Cmd(0)
    , AD12VSC2Pwrup_Cmd(0)
    , AD12VSC3Pwrup_Cmd(0)
    , AD12VSC4Pwrup_Cmd(0)
    , AD12VSC5Pwrup_Cmd(0)
    , AD12VSC6Pwrup_Cmd(0)
    , PwrCmd_RollCnt(0)
    , PwrCmd_Checksum(0)  {
    }
  PCU_PowerCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ADChasPwrup_Cmd(0)
    , AD12VMCPwrup_Cmd(0)
    , AD12VSC1Pwrup_Cmd(0)
    , AD12VSC2Pwrup_Cmd(0)
    , AD12VSC3Pwrup_Cmd(0)
    , AD12VSC4Pwrup_Cmd(0)
    , AD12VSC5Pwrup_Cmd(0)
    , AD12VSC6Pwrup_Cmd(0)
    , PwrCmd_RollCnt(0)
    , PwrCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _ADChasPwrup_Cmd_type;
  _ADChasPwrup_Cmd_type ADChasPwrup_Cmd;

   typedef int8_t _AD12VMCPwrup_Cmd_type;
  _AD12VMCPwrup_Cmd_type AD12VMCPwrup_Cmd;

   typedef int8_t _AD12VSC1Pwrup_Cmd_type;
  _AD12VSC1Pwrup_Cmd_type AD12VSC1Pwrup_Cmd;

   typedef int8_t _AD12VSC2Pwrup_Cmd_type;
  _AD12VSC2Pwrup_Cmd_type AD12VSC2Pwrup_Cmd;

   typedef int8_t _AD12VSC3Pwrup_Cmd_type;
  _AD12VSC3Pwrup_Cmd_type AD12VSC3Pwrup_Cmd;

   typedef int8_t _AD12VSC4Pwrup_Cmd_type;
  _AD12VSC4Pwrup_Cmd_type AD12VSC4Pwrup_Cmd;

   typedef int8_t _AD12VSC5Pwrup_Cmd_type;
  _AD12VSC5Pwrup_Cmd_type AD12VSC5Pwrup_Cmd;

   typedef int8_t _AD12VSC6Pwrup_Cmd_type;
  _AD12VSC6Pwrup_Cmd_type AD12VSC6Pwrup_Cmd;

   typedef int32_t _PwrCmd_RollCnt_type;
  _PwrCmd_RollCnt_type PwrCmd_RollCnt;

   typedef int32_t _PwrCmd_Checksum_type;
  _PwrCmd_Checksum_type PwrCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PCU_PowerCmd_

typedef ::e_car_msgs::PCU_PowerCmd_<std::allocator<void> > PCU_PowerCmd;

typedef boost::shared_ptr< ::e_car_msgs::PCU_PowerCmd > PCU_PowerCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::PCU_PowerCmd const> PCU_PowerCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ADChasPwrup_Cmd == rhs.ADChasPwrup_Cmd &&
    lhs.AD12VMCPwrup_Cmd == rhs.AD12VMCPwrup_Cmd &&
    lhs.AD12VSC1Pwrup_Cmd == rhs.AD12VSC1Pwrup_Cmd &&
    lhs.AD12VSC2Pwrup_Cmd == rhs.AD12VSC2Pwrup_Cmd &&
    lhs.AD12VSC3Pwrup_Cmd == rhs.AD12VSC3Pwrup_Cmd &&
    lhs.AD12VSC4Pwrup_Cmd == rhs.AD12VSC4Pwrup_Cmd &&
    lhs.AD12VSC5Pwrup_Cmd == rhs.AD12VSC5Pwrup_Cmd &&
    lhs.AD12VSC6Pwrup_Cmd == rhs.AD12VSC6Pwrup_Cmd &&
    lhs.PwrCmd_RollCnt == rhs.PwrCmd_RollCnt &&
    lhs.PwrCmd_Checksum == rhs.PwrCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e20658d4566685bbdae55f7fc1134d24";
  }

  static const char* value(const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe20658d4566685bbULL;
  static const uint64_t static_value2 = 0xdae55f7fc1134d24ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/PCU_PowerCmd";
  }

  static const char* value(const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 ADChasPwrup_Cmd\n"
"\n"
"int8 AD12VMCPwrup_Cmd\n"
"\n"
"int8 AD12VSC1Pwrup_Cmd\n"
"\n"
"int8 AD12VSC2Pwrup_Cmd\n"
"\n"
"int8 AD12VSC3Pwrup_Cmd\n"
"\n"
"int8 AD12VSC4Pwrup_Cmd\n"
"\n"
"int8 AD12VSC5Pwrup_Cmd\n"
"\n"
"int8 AD12VSC6Pwrup_Cmd\n"
"\n"
"int32 PwrCmd_RollCnt\n"
"\n"
"int32 PwrCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ADChasPwrup_Cmd);
      stream.next(m.AD12VMCPwrup_Cmd);
      stream.next(m.AD12VSC1Pwrup_Cmd);
      stream.next(m.AD12VSC2Pwrup_Cmd);
      stream.next(m.AD12VSC3Pwrup_Cmd);
      stream.next(m.AD12VSC4Pwrup_Cmd);
      stream.next(m.AD12VSC5Pwrup_Cmd);
      stream.next(m.AD12VSC6Pwrup_Cmd);
      stream.next(m.PwrCmd_RollCnt);
      stream.next(m.PwrCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PCU_PowerCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::PCU_PowerCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ADChasPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ADChasPwrup_Cmd);
    s << indent << "AD12VMCPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VMCPwrup_Cmd);
    s << indent << "AD12VSC1Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC1Pwrup_Cmd);
    s << indent << "AD12VSC2Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC2Pwrup_Cmd);
    s << indent << "AD12VSC3Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC3Pwrup_Cmd);
    s << indent << "AD12VSC4Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC4Pwrup_Cmd);
    s << indent << "AD12VSC5Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC5Pwrup_Cmd);
    s << indent << "AD12VSC6Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AD12VSC6Pwrup_Cmd);
    s << indent << "PwrCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PwrCmd_RollCnt);
    s << indent << "PwrCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PwrCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_PCU_POWERCMD_H
