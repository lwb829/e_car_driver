// Generated by gencpp from file e_car_msgs/ADCU_CldPowerCmd.msg
// DO NOT EDIT!


#ifndef E_CAR_MSGS_MESSAGE_ADCU_CLDPOWERCMD_H
#define E_CAR_MSGS_MESSAGE_ADCU_CLDPOWERCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace e_car_msgs
{
template <class ContainerAllocator>
struct ADCU_CldPowerCmd_
{
  typedef ADCU_CldPowerCmd_<ContainerAllocator> Type;

  ADCU_CldPowerCmd_()
    : header()
    , CldVehPwrup_Cmd(0)
    , CldChasPwrup_Cmd(0)
    , Cld12VMCPwrup_Cmd(0)
    , Cld12VRCPwrup_Cmd(0)
    , Cld24VMCPwrup_Cmd(0)
    , CldPA12VPwrup_Cmd(0)
    , CldPA24VPwrup_Cmd(0)
    , Cld12VSC1Pwrup_Cmd(0)
    , Cld12VSC2Pwrup_Cmd(0)
    , Cld12VSC3Pwrup_Cmd(0)
    , Cld12VSC4Pwrup_Cmd(0)
    , Cld12VSC5Pwrup_Cmd(0)
    , Cld12VSC6Pwrup_Cmd(0)
    , Cld12VMCPwrdownCnfm_Cmd(0)
    , Cld12VRCPwrdownCnfm_Cmd(0)
    , Cld24VMCPwrdownCnfm_Cmd(0)
    , CldPA12VPwrdownCnfm_Cmd(0)
    , CldPA24VPwrdownCnfm_Cmd(0)
    , CldPwrCmd_RollCnt(0)
    , CldPwrCmd_Checksum(0)  {
    }
  ADCU_CldPowerCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CldVehPwrup_Cmd(0)
    , CldChasPwrup_Cmd(0)
    , Cld12VMCPwrup_Cmd(0)
    , Cld12VRCPwrup_Cmd(0)
    , Cld24VMCPwrup_Cmd(0)
    , CldPA12VPwrup_Cmd(0)
    , CldPA24VPwrup_Cmd(0)
    , Cld12VSC1Pwrup_Cmd(0)
    , Cld12VSC2Pwrup_Cmd(0)
    , Cld12VSC3Pwrup_Cmd(0)
    , Cld12VSC4Pwrup_Cmd(0)
    , Cld12VSC5Pwrup_Cmd(0)
    , Cld12VSC6Pwrup_Cmd(0)
    , Cld12VMCPwrdownCnfm_Cmd(0)
    , Cld12VRCPwrdownCnfm_Cmd(0)
    , Cld24VMCPwrdownCnfm_Cmd(0)
    , CldPA12VPwrdownCnfm_Cmd(0)
    , CldPA24VPwrdownCnfm_Cmd(0)
    , CldPwrCmd_RollCnt(0)
    , CldPwrCmd_Checksum(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _CldVehPwrup_Cmd_type;
  _CldVehPwrup_Cmd_type CldVehPwrup_Cmd;

   typedef int8_t _CldChasPwrup_Cmd_type;
  _CldChasPwrup_Cmd_type CldChasPwrup_Cmd;

   typedef int8_t _Cld12VMCPwrup_Cmd_type;
  _Cld12VMCPwrup_Cmd_type Cld12VMCPwrup_Cmd;

   typedef int8_t _Cld12VRCPwrup_Cmd_type;
  _Cld12VRCPwrup_Cmd_type Cld12VRCPwrup_Cmd;

   typedef int8_t _Cld24VMCPwrup_Cmd_type;
  _Cld24VMCPwrup_Cmd_type Cld24VMCPwrup_Cmd;

   typedef int8_t _CldPA12VPwrup_Cmd_type;
  _CldPA12VPwrup_Cmd_type CldPA12VPwrup_Cmd;

   typedef int8_t _CldPA24VPwrup_Cmd_type;
  _CldPA24VPwrup_Cmd_type CldPA24VPwrup_Cmd;

   typedef int8_t _Cld12VSC1Pwrup_Cmd_type;
  _Cld12VSC1Pwrup_Cmd_type Cld12VSC1Pwrup_Cmd;

   typedef int8_t _Cld12VSC2Pwrup_Cmd_type;
  _Cld12VSC2Pwrup_Cmd_type Cld12VSC2Pwrup_Cmd;

   typedef int8_t _Cld12VSC3Pwrup_Cmd_type;
  _Cld12VSC3Pwrup_Cmd_type Cld12VSC3Pwrup_Cmd;

   typedef int8_t _Cld12VSC4Pwrup_Cmd_type;
  _Cld12VSC4Pwrup_Cmd_type Cld12VSC4Pwrup_Cmd;

   typedef int8_t _Cld12VSC5Pwrup_Cmd_type;
  _Cld12VSC5Pwrup_Cmd_type Cld12VSC5Pwrup_Cmd;

   typedef int8_t _Cld12VSC6Pwrup_Cmd_type;
  _Cld12VSC6Pwrup_Cmd_type Cld12VSC6Pwrup_Cmd;

   typedef int8_t _Cld12VMCPwrdownCnfm_Cmd_type;
  _Cld12VMCPwrdownCnfm_Cmd_type Cld12VMCPwrdownCnfm_Cmd;

   typedef int8_t _Cld12VRCPwrdownCnfm_Cmd_type;
  _Cld12VRCPwrdownCnfm_Cmd_type Cld12VRCPwrdownCnfm_Cmd;

   typedef int8_t _Cld24VMCPwrdownCnfm_Cmd_type;
  _Cld24VMCPwrdownCnfm_Cmd_type Cld24VMCPwrdownCnfm_Cmd;

   typedef int8_t _CldPA12VPwrdownCnfm_Cmd_type;
  _CldPA12VPwrdownCnfm_Cmd_type CldPA12VPwrdownCnfm_Cmd;

   typedef int8_t _CldPA24VPwrdownCnfm_Cmd_type;
  _CldPA24VPwrdownCnfm_Cmd_type CldPA24VPwrdownCnfm_Cmd;

   typedef int32_t _CldPwrCmd_RollCnt_type;
  _CldPwrCmd_RollCnt_type CldPwrCmd_RollCnt;

   typedef int32_t _CldPwrCmd_Checksum_type;
  _CldPwrCmd_Checksum_type CldPwrCmd_Checksum;





  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ADCU_CldPowerCmd_

typedef ::e_car_msgs::ADCU_CldPowerCmd_<std::allocator<void> > ADCU_CldPowerCmd;

typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldPowerCmd > ADCU_CldPowerCmdPtr;
typedef boost::shared_ptr< ::e_car_msgs::ADCU_CldPowerCmd const> ADCU_CldPowerCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.CldVehPwrup_Cmd == rhs.CldVehPwrup_Cmd &&
    lhs.CldChasPwrup_Cmd == rhs.CldChasPwrup_Cmd &&
    lhs.Cld12VMCPwrup_Cmd == rhs.Cld12VMCPwrup_Cmd &&
    lhs.Cld12VRCPwrup_Cmd == rhs.Cld12VRCPwrup_Cmd &&
    lhs.Cld24VMCPwrup_Cmd == rhs.Cld24VMCPwrup_Cmd &&
    lhs.CldPA12VPwrup_Cmd == rhs.CldPA12VPwrup_Cmd &&
    lhs.CldPA24VPwrup_Cmd == rhs.CldPA24VPwrup_Cmd &&
    lhs.Cld12VSC1Pwrup_Cmd == rhs.Cld12VSC1Pwrup_Cmd &&
    lhs.Cld12VSC2Pwrup_Cmd == rhs.Cld12VSC2Pwrup_Cmd &&
    lhs.Cld12VSC3Pwrup_Cmd == rhs.Cld12VSC3Pwrup_Cmd &&
    lhs.Cld12VSC4Pwrup_Cmd == rhs.Cld12VSC4Pwrup_Cmd &&
    lhs.Cld12VSC5Pwrup_Cmd == rhs.Cld12VSC5Pwrup_Cmd &&
    lhs.Cld12VSC6Pwrup_Cmd == rhs.Cld12VSC6Pwrup_Cmd &&
    lhs.Cld12VMCPwrdownCnfm_Cmd == rhs.Cld12VMCPwrdownCnfm_Cmd &&
    lhs.Cld12VRCPwrdownCnfm_Cmd == rhs.Cld12VRCPwrdownCnfm_Cmd &&
    lhs.Cld24VMCPwrdownCnfm_Cmd == rhs.Cld24VMCPwrdownCnfm_Cmd &&
    lhs.CldPA12VPwrdownCnfm_Cmd == rhs.CldPA12VPwrdownCnfm_Cmd &&
    lhs.CldPA24VPwrdownCnfm_Cmd == rhs.CldPA24VPwrdownCnfm_Cmd &&
    lhs.CldPwrCmd_RollCnt == rhs.CldPwrCmd_RollCnt &&
    lhs.CldPwrCmd_Checksum == rhs.CldPwrCmd_Checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator1> & lhs, const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace e_car_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "712914972d7a36597399d67071cb4425";
  }

  static const char* value(const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x712914972d7a3659ULL;
  static const uint64_t static_value2 = 0x7399d67071cb4425ULL;
};

template<class ContainerAllocator>
struct DataType< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e_car_msgs/ADCU_CldPowerCmd";
  }

  static const char* value(const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int8 CldVehPwrup_Cmd\n"
"\n"
"int8 CldChasPwrup_Cmd\n"
"\n"
"int8 Cld12VMCPwrup_Cmd\n"
"\n"
"int8 Cld12VRCPwrup_Cmd\n"
"\n"
"int8 Cld24VMCPwrup_Cmd\n"
"\n"
"int8 CldPA12VPwrup_Cmd\n"
"\n"
"int8 CldPA24VPwrup_Cmd\n"
"\n"
"int8 Cld12VSC1Pwrup_Cmd\n"
"\n"
"int8 Cld12VSC2Pwrup_Cmd\n"
"\n"
"int8 Cld12VSC3Pwrup_Cmd\n"
"\n"
"int8 Cld12VSC4Pwrup_Cmd\n"
"\n"
"int8 Cld12VSC5Pwrup_Cmd\n"
"\n"
"int8 Cld12VSC6Pwrup_Cmd\n"
"\n"
"int8 Cld12VMCPwrdownCnfm_Cmd\n"
"\n"
"int8 Cld12VRCPwrdownCnfm_Cmd\n"
"\n"
"int8 Cld24VMCPwrdownCnfm_Cmd\n"
"\n"
"int8 CldPA12VPwrdownCnfm_Cmd\n"
"\n"
"int8 CldPA24VPwrdownCnfm_Cmd\n"
"\n"
"int32 CldPwrCmd_RollCnt\n"
"\n"
"int32 CldPwrCmd_Checksum\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CldVehPwrup_Cmd);
      stream.next(m.CldChasPwrup_Cmd);
      stream.next(m.Cld12VMCPwrup_Cmd);
      stream.next(m.Cld12VRCPwrup_Cmd);
      stream.next(m.Cld24VMCPwrup_Cmd);
      stream.next(m.CldPA12VPwrup_Cmd);
      stream.next(m.CldPA24VPwrup_Cmd);
      stream.next(m.Cld12VSC1Pwrup_Cmd);
      stream.next(m.Cld12VSC2Pwrup_Cmd);
      stream.next(m.Cld12VSC3Pwrup_Cmd);
      stream.next(m.Cld12VSC4Pwrup_Cmd);
      stream.next(m.Cld12VSC5Pwrup_Cmd);
      stream.next(m.Cld12VSC6Pwrup_Cmd);
      stream.next(m.Cld12VMCPwrdownCnfm_Cmd);
      stream.next(m.Cld12VRCPwrdownCnfm_Cmd);
      stream.next(m.Cld24VMCPwrdownCnfm_Cmd);
      stream.next(m.CldPA12VPwrdownCnfm_Cmd);
      stream.next(m.CldPA24VPwrdownCnfm_Cmd);
      stream.next(m.CldPwrCmd_RollCnt);
      stream.next(m.CldPwrCmd_Checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCU_CldPowerCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::e_car_msgs::ADCU_CldPowerCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CldVehPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldVehPwrup_Cmd);
    s << indent << "CldChasPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldChasPwrup_Cmd);
    s << indent << "Cld12VMCPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VMCPwrup_Cmd);
    s << indent << "Cld12VRCPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VRCPwrup_Cmd);
    s << indent << "Cld24VMCPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld24VMCPwrup_Cmd);
    s << indent << "CldPA12VPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldPA12VPwrup_Cmd);
    s << indent << "CldPA24VPwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldPA24VPwrup_Cmd);
    s << indent << "Cld12VSC1Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC1Pwrup_Cmd);
    s << indent << "Cld12VSC2Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC2Pwrup_Cmd);
    s << indent << "Cld12VSC3Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC3Pwrup_Cmd);
    s << indent << "Cld12VSC4Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC4Pwrup_Cmd);
    s << indent << "Cld12VSC5Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC5Pwrup_Cmd);
    s << indent << "Cld12VSC6Pwrup_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VSC6Pwrup_Cmd);
    s << indent << "Cld12VMCPwrdownCnfm_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VMCPwrdownCnfm_Cmd);
    s << indent << "Cld12VRCPwrdownCnfm_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld12VRCPwrdownCnfm_Cmd);
    s << indent << "Cld24VMCPwrdownCnfm_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Cld24VMCPwrdownCnfm_Cmd);
    s << indent << "CldPA12VPwrdownCnfm_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldPA12VPwrdownCnfm_Cmd);
    s << indent << "CldPA24VPwrdownCnfm_Cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CldPA24VPwrdownCnfm_Cmd);
    s << indent << "CldPwrCmd_RollCnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CldPwrCmd_RollCnt);
    s << indent << "CldPwrCmd_Checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CldPwrCmd_Checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // E_CAR_MSGS_MESSAGE_ADCU_CLDPOWERCMD_H
